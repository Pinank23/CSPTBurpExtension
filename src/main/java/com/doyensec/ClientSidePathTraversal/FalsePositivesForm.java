package com.doyensec.ClientSidePathTraversal;

import java.awt.Component;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Map;
import java.util.Set;

import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class FalsePositivesForm {
    private JPanel panel1;
    private JTable falsePositivesTable;

    public FalsePositivesForm(ClientSidePathTraversal cspt) {
        $$$setupUI$$$();
        display(cspt);

    }

    public void display(ClientSidePathTraversal cspt) {
        displayTable(cspt.getFalsePositivesList());

        createContextualMenus(cspt);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private void displayTable(Map<String, Set<String>> falsePositivesList) {

        int numberOfEntries = 0;
        if (falsePositivesList != null && !falsePositivesList.isEmpty()) {
            numberOfEntries = (int) falsePositivesList.values().stream().mapToLong(x -> x.size()).sum();
        }

        Object[][] arr = new Object[numberOfEntries][2];

        int i = 0;

        for (String paramName : falsePositivesList.keySet()) {

            for (String url : falsePositivesList.get(paramName)) {
                arr[i][0] = paramName;
                arr[i][1] = url;
                i++;
            }
        }

        falsePositivesTable.setModel(new DefaultTableModel(arr, new String[] { "Param Name", "URL (RegExp)" }));

    }

    private void createContextualMenus(ClientSidePathTraversal cspt) {
        final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete");

        falsePositivesTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int r = falsePositivesTable.rowAtPoint(e.getPoint());
                if (r >= 0 && r < falsePositivesTable.getRowCount()) {
                    falsePositivesTable.setRowSelectionInterval(r, r);
                } else {
                    falsePositivesTable.clearSelection();
                }

                int rowindex = falsePositivesTable.getSelectedRow();
                if (rowindex < 0)
                    return;
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }

            }
        });

        deleteItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Component c = (Component) e.getSource();
                JPopupMenu popup = (JPopupMenu) c.getParent();
                JTable table = (JTable) popup.getInvoker();
                cspt.removeFalsePositive(table.getValueAt(table.getSelectedRow(), 0).toString(),
                        table.getValueAt(table.getSelectedRow(), 1).toString());
            }
        });
        popupMenu.add(deleteItem);
        falsePositivesTable.setComponentPopupMenu(popupMenu);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
     * edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1,
                new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        null, null, null, 0, false));
        falsePositivesTable = new JTable();
        scrollPane1.setViewportView(falsePositivesTable);
    }

}
